assert('String#color') do
  assert_equal "\e[31mhello\e[m", 'hello'.color(:red), 'red'
  assert_equal "\e[32mhello\e[m", 'hello'.color(:green), 'green'
  assert_equal "\e[33mhello\e[m", 'hello'.color(:yellow), 'yellow'
  assert_equal "\e[34mhello\e[m", 'hello'.color(:blue), 'blue'
  assert_equal "\e[35mhello\e[m", 'hello'.color(:magenta), 'magenta'
  assert_equal "\e[36mhello\e[m", 'hello'.color(:cyan), 'cyan'
  assert_equal "\e[37mhello\e[m", 'hello'.color(:white), 'white'
  assert_equal "\e[90mhello\e[m", 'hello'.color(:gray), 'gray'
  assert_equal "\e[90mhello\e[m", 'hello'.color(:bright_black), 'bright_black'
  assert_equal "\e[91mhello\e[m", 'hello'.color(:bright_red), 'bright_red'
  assert_equal "\e[92mhello\e[m", 'hello'.color(:bright_green), 'bright_green'
  assert_equal "\e[93mhello\e[m", 'hello'.color(:bright_yellow), 'bright_yellow'
  assert_equal "\e[94mhello\e[m", 'hello'.color(:bright_blue), 'bright_blue'
  assert_equal "\e[95mhello\e[m", 'hello'.color(:bright_magenta), 'bright_magenta'
  assert_equal "\e[96mhello\e[m", 'hello'.color(:bright_cyan), 'bright_cyan'
  assert_equal "\e[97mhello\e[m", 'hello'.color(:bright_white), 'bright_white'

  assert_equal "\e[41mhello\e[m", 'hello'.color(nil, :red), 'background red'
  assert_equal "\e[42mhello\e[m", 'hello'.color(nil, :green), 'background green'
  assert_equal "\e[43mhello\e[m", 'hello'.color(nil, :yellow), 'background yellow'
  assert_equal "\e[44mhello\e[m", 'hello'.color(nil, :blue), 'background blue'
  assert_equal "\e[45mhello\e[m", 'hello'.color(nil, :magenta), 'background magenta'
  assert_equal "\e[46mhello\e[m", 'hello'.color(nil, :cyan), 'background cyan'
  assert_equal "\e[47mhello\e[m", 'hello'.color(nil, :white), 'background white'
  assert_equal "\e[100mhello\e[m", 'hello'.color(nil, :gray), 'background gray'
  assert_equal "\e[100mhello\e[m", 'hello'.color(nil, :bright_black), 'background bright_black'
  assert_equal "\e[101mhello\e[m", 'hello'.color(nil, :bright_red), 'background bright_red'
  assert_equal "\e[102mhello\e[m", 'hello'.color(nil, :bright_green), 'background bright_green'
  assert_equal "\e[103mhello\e[m", 'hello'.color(nil, :bright_yellow), 'background bright_yellow'
  assert_equal "\e[104mhello\e[m", 'hello'.color(nil, :bright_blue), 'background bright_blue'
  assert_equal "\e[105mhello\e[m", 'hello'.color(nil, :bright_magenta), 'background bright_magenta'
  assert_equal "\e[106mhello\e[m", 'hello'.color(nil, :bright_cyan), 'background bright_cyan'
  assert_equal "\e[107mhello\e[m", 'hello'.color(nil, :bright_white), 'background bright_white'

  assert_equal "\e[1mhello\e[m", 'hello'.color(nil, nil, :bold), 'bold'
  assert_equal "\e[4mhello\e[m", 'hello'.color(nil, nil, :underline), 'underline'
  assert_equal "\e[5mhello\e[m", 'hello'.color(nil, nil, :blink), 'blink'
  assert_equal "\e[7mhello\e[m", 'hello'.color(nil, nil, :reverse), 'reverse'
  assert_equal "\e[8mhello\e[m", 'hello'.color(nil, nil, :invisible), 'invisible'

  assert_equal "\e[31;41;1mhello\e[m", 'hello'.color(:red, :red, :bold), 'red, background red, bold'

  assert_equal "\e[31mhello\e[m", 'hello'.red, 'red'
  assert_equal "\e[32mhello\e[m", 'hello'.green, 'green method'
  assert_equal "\e[33mhello\e[m", 'hello'.yellow, 'yellow method'
  assert_equal "\e[34mhello\e[m", 'hello'.blue, 'blue method'
  assert_equal "\e[35mhello\e[m", 'hello'.magenta, 'magenta method'
  assert_equal "\e[36mhello\e[m", 'hello'.cyan, 'cyan method'
  assert_equal "\e[37mhello\e[m", 'hello'.white, 'white method'
  assert_equal "\e[90mhello\e[m", 'hello'.gray, 'gray method'
  assert_equal "\e[90mhello\e[m", 'hello'.bright_black, 'bright_black method'
  assert_equal "\e[91mhello\e[m", 'hello'.bright_red, 'bright_red method'
  assert_equal "\e[92mhello\e[m", 'hello'.bright_green, 'bright_green method'
  assert_equal "\e[93mhello\e[m", 'hello'.bright_yellow, 'bright_yellow method'
  assert_equal "\e[94mhello\e[m", 'hello'.bright_blue, 'bright_blue method'
  assert_equal "\e[95mhello\e[m", 'hello'.bright_magenta, 'bright_magenta method'
  assert_equal "\e[96mhello\e[m", 'hello'.bright_cyan, 'bright_cyan method'
  assert_equal "\e[97mhello\e[m", 'hello'.bright_white, 'bright_white method'

  assert_equal "\e[41mhello\e[m", 'hello'.bg_red, 'background red method'
  assert_equal "\e[42mhello\e[m", 'hello'.bg_green, 'background green method'
  assert_equal "\e[43mhello\e[m", 'hello'.bg_yellow, 'background yellow method'
  assert_equal "\e[44mhello\e[m", 'hello'.bg_blue, 'background blue method'
  assert_equal "\e[45mhello\e[m", 'hello'.bg_magenta, 'background magenta method'
  assert_equal "\e[46mhello\e[m", 'hello'.bg_cyan, 'background cyan method'
  assert_equal "\e[47mhello\e[m", 'hello'.bg_white, 'background white method'
  assert_equal "\e[100mhello\e[m", 'hello'.bg_gray, 'background gray method'
  assert_equal "\e[100mhello\e[m", 'hello'.bg_bright_black, 'background bright_black method'
  assert_equal "\e[101mhello\e[m", 'hello'.bg_bright_red, 'background bright_red method'
  assert_equal "\e[102mhello\e[m", 'hello'.bg_bright_green, 'background bright_green method'
  assert_equal "\e[103mhello\e[m", 'hello'.bg_bright_yellow, 'background bright_yellow method'
  assert_equal "\e[104mhello\e[m", 'hello'.bg_bright_blue, 'background bright_blue method'
  assert_equal "\e[105mhello\e[m", 'hello'.bg_bright_magenta, 'background bright_magenta method'
  assert_equal "\e[106mhello\e[m", 'hello'.bg_bright_cyan, 'background bright_cyan method'
  assert_equal "\e[107mhello\e[m", 'hello'.bg_bright_white, 'background bright_white method'

  assert_equal "\e[1mhello\e[m", 'hello'.bold, 'bold method'
  assert_equal "\e[4mhello\e[m", 'hello'.underline, 'underline method'
  assert_equal "\e[5mhello\e[m", 'hello'.blink, 'blink method'
  assert_equal "\e[7mhello\e[m", 'hello'.reverse, 'reverse method'
  assert_equal "\e[8mhello\e[m", 'hello'.invisible, 'invisible method'

  assert_equal "\e[1;41;31mhello\e[m", 'hello'.red.bg_red.bold, 'red, background red, bold method'

  assert_raise(ArgumentError) { 'hello'.color(:unknown) }
  assert_raise(ArgumentError) { 'hello'.color(300) }
  assert_raise(ArgumentError) { 'hello'.color('#fff') }
  assert_raise(ArgumentError) { 'hello'.color('#00ff00ff') }
  assert_raise(ArgumentError) { 'hello'.color('#foobar') }
end
